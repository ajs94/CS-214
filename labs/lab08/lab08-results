Script started on Wed 05 Apr 2017 01:32:54 PM EDT
ajs94@boole:~/CS214/labs/lab08/java$ cat NameTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Aaron Santucci
 * Date: April 5, 2017
 ************************************************************/

import java.util.Scanner;

public class NameTester  
{
	public static void main(String[] args)
	{
		Name aName = new Name("John", "Paul", "Jones");

		assert aName.getFirst().equals("John") ;
		assert aName.getMiddle().equals("Paul") ;
		assert aName.getLast().equals("Jones") ;

		System.out.println(aName);
		assert aName.toString().equals("John Paul Jones");
		
		// project tests
		aName.changeFirst("Aaron");
		aName.changeMiddle("Joseph");
		aName.changeLast("Santucci");
		
		assert aName.getFirst().equals("Aaron") ;
		assert aName.getMiddle().equals("Joseph");
		assert aName.getLast().equals("Santucci");
		
		System.out.println(aName);
		System.out.println(aName.lfmi());
		assert aName.lfmi().equals("Santucci, Aaron J.");
		
//		aName.readName();
//		System.out.println(aName);
//		System.out.println(aName.lfmi());

		System.out.println("All tests passed!");
	}
}











ajs94@boole:~/CS214/labs/lab08/java$ cat Name.java
/* Name.java implements class Name. 
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Aaron Santucci
 * Date: April 5, 2017
 ************************************************************/

import java.util.Scanner;

class Name 
{
	private String myFirst,
		myMiddle,
		myLast;
	
	public Name(String first, String middle, String last)
	{
		myFirst = first;
		myMiddle = middle;
		myLast = last;
	}
	
	public String toString()
	{
		return myFirst + ' ' + myMiddle + ' ' + myLast;
	}
	
	// return in form "Last, First MiddleInitial."
	public String lfmi() {
		return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";	
	}
	
	// readName method to read in characters
	public void readName()
	{
		Scanner keyboard = new Scanner(System.in);
		System.out.println("\nEnter the first, middle, and last names: ");
      	myFirst = keyboard.next();
		myMiddle = keyboard.next();
      	myLast = keyboard.next();
	}
	
	// getter methods
	public String getFirst()	{
		return myFirst;		}
	
	public String getMiddle()	{
		return myMiddle;	}
	
	public String getLast()	{
		return myLast;		}
	
	// mutator methods
	public void changeFirst(String aFirst) {
		myFirst = aFirst;	}
	
	public void changeMiddle(String aMiddle) {
		myMiddle = aMiddle;	}
	
	public void changeLast(String aLast) {
		myLast = aLast;	}
	
}
ajs94@boole:~/CS214/labs/lab08/java$ javac -deprecation NameTester.java
ajs94@boole:~/CS214/labs/lab08/java$ java Namet Tester
John Paul Jones
Aaron Joseph Santucci
Santucci, Aaron J.
All tests passed!
ajs94@boole:~/CS214/labs/lab08/java$ exit

Script done on Wed 05 Apr 2017 01:33:54 PM EDT
Script started on Fri 07 Apr 2017 10:00:16 AM EDT
ajs94@boole:~/CS214/labs/lab08/ada$ ./name_tester[Kcat name t  _tester.adb name_package.ads namePa  _pa ckage.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 7, 2017
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;
with Name_Package; use Name_Package;

procedure Name_Tester is
   aName : Name_Package.Name;
begin
   
   Init(aName, "John    ", "Paul    ", "Jones   ");

   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                    "getFullName() failed");

   Put(aName); New_line;
   Put("All tests passed!"); New_line;

end name_tester;

-- name_package.ads declares the Name type and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 7, 2017
--------------------------------------------------------------

package Name_Package is
   
   type Name is private;
   
   procedure Init(TheName : out Name ; First, Middle, Last : in String);
   function GetFirst(TheName : in Name) return String;
   function GetMiddle(TheName : in Name) return String;
   function GetLast(TheName : in Name) return String;
   function getFullName(TheName : in Name) return String;
   procedure Put(TheName : in Name);
    
     
private
   
   NAME_SIZE : constant Integer := 8;
   
   type Name is
   record
      MyFirst, MyMiddle, MyLast : String (1 .. NAME_SIZE);
   end record;
   
end Name_Package;
-- name_package.adb defines operations for the Name type.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 7, 2017
---------------------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

package body Name_Package is
   
----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------
     
     procedure Init(TheName : out Name ; First, Middle, Last : in String) is
     begin
	TheName.MyFirst := First;
	TheName.MyMiddle := Middle;
	TheName.MyLast := Last;
     end Init;


  ----------------------------------------------
  -- getters retrieve Name.my*Name*        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.my*Name*.                  -
  ----------------------------------------------
     
     function GetFirst(TheName : in Name) return String is
     begin
	return TheName.MyFirst;
     end GetFirst;
     
     function GetMiddle(TheName : in Name) return String is
     begin
	return TheName.MyMiddle;
     end GetMiddle;


     function GetLast(TheName : in Name) return String is
     begin
	return TheName.MyLast;
     end GetLast;


  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------
     
     function getFullName(TheName : in Name) return String is
     begin
	return TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast;
     end getFullName;
     

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------
     
     procedure Put(TheName : in Name) is
     begin
	Put_Line(GetFullName(TheName));
     end Put;
     
end Name_Package;

ajs94@boole:~/CS214/labs/lab08/ada$ ./name_tester             ./name_tester
John     Paul     Jones   

All tests passed!
ajs94@boole:~/CS214/labs/lab08/ada$ exit

Script done on Fri 07 Apr 2017 10:01:07 AM EDT
Script started on Fri 07 Apr 2017 01:50:25 PM EDT
ajs94@boole:~/CS214/labs/lab08/e-lisp$ cat nameTester.el Name.el
;;; nameTester.el simulates and tests an e-LISP Name type.
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Aaron Santucci
;;; Date: March 31, 2017

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver for our Name functions. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (setq load-path (cons "." load-path))
  (load "Name.elc")
  (require 'cl)                              ; assert
  (setq aName (Name "John" "Paul" "Jones"))  ; build a Name

  (assert (equal (getFirst aName) "John" ))  ; test it
  (assert (equal (getMiddle aName) "Paul" ))
  (assert (equal (getLast aName) "Jones" ))
  (assert (equal (getFullName aName) "John Paul Jones" ))

  (setq buf (get-buffer "nameTester.el"))    ; buf = this buffer
  (assert (eq (printName aName buf) aName ) ) ; output
  (terpri buf)                               ; newline
  (princ "All tests passed!" buf)            ; feedback
  (terpri buf))                              ; newline

;;; Testing ;;;
John Paul Jones
All tests passed!
t


;;; Name.el simulates an e-LISP Name type and operations on that type.
;;;
;;; Begun by: Dr. Adams, for CS 214 at Calvin College.
;;; Completed by:  Aaron Santucci
;;; Date: April 7, 2017

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Name constructs a name from three strings.      ;;
;;; Receive: first, middle and last, three strings. ;;
;;; Return: the triplet (first middle last).        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun Name (first middle last)
  (list first middle last))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst extracts the first name of a name object.;
;;; Receive: theName, a Name.                       
;;; Return: the first string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getFirst(theName)
  (car theName))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle extracts the middle name of a name object.
;;; Receive: theName, a Name.                      
;;; Return: the second string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getMiddle(theName)
  (car (cdr theName)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast extracts the last name of a name object.
;;; Receive: theName, a Name.                    
;;; Return: the third string in theName.       
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getLast(theName)
  (car (cdr (cdr theName))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName returns a full name in F-M-L order. 
;;; Return: myFirst, myMiddle, myLast.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getFullName(theName)
  (concat (getFirst theName) " " (getMiddle theName) " " (getLast theName)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName displays a name object.         
;;; Receive: theName, a Name;                 
;;;          buffer, the name of a buffer.   
;;; Output: the strings in theName to buffer. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun printName(theName buffer)
  (princ (getFullName theName) buffer)
  theName)
ajs94@boole:~/CS214/labs/lab08/e-lisp$ exit

Script done on Fri 07 Apr 2017 01:50:38 PM EDT
Script started on Wed 05 Apr 2017 02:04:26 PM EDT
ajs94@boole:~/CS214/labs/lab08/ruby$ cat nameTester.rb n Name.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Aaron Santuccci
# Date: April 5, 2017
####################################################

require 'test/unit/assertions'   # needed for assert
require '/home/ajs94/CS214/labs/lab08/ruby/Name'    # full path bc else an error
include Test::Unit::Assertions


def testName
  name = Name::Name.new("John", "Paul", "Jones")

  assert name.first == "John", "first failed"
  assert name.middle == "Paul", "middle failed"
  assert name.last == "Jones", "last failed"
  assert name.fullName == "John Paul Jones", "fullName failed"
  assert name.print == "John Paul Jones", "print failed"

  #project tests
  name.first = "Aaron"
  name.middle = "Joseph"
  name.last = "Santucci"
  
  assert name.first == "Aaron", "first failed"
  assert name.middle == "Joseph", "middle failed"
  assert name.last == "Santucci", "last failed"
  assert name.fullName == "Aaron Joseph Santucci", "fullName failed"
  assert name.print == "Aaron Joseph Santucci", "print failed"
  puts name.lfmi
  assert name.lfmi == "Santucci, Aaron J.", "lfmi failed"
  
#  name.readName
#  name.print
#  puts name.lfmi
  
  print "All tests passed!\n"
end

testName

# Name.rb Contains the Name module
#
# Completed by: Aaron Santuccci
# Date: April 5, 2017
####################################################

module Name
  
  class Name
    def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
    end

    attr_accessor :first, :middle, :last

    def lfmi
      @last + ', ' + @first + ' ' + @middle[0,1] + '.'
    end

    def readName
      puts "Enter the first, middle, and last names: "
      @first = gets.chomp
      @middle = gets.chomp
      @last = gets.chomp
    end

    def fullName
      @first + ' ' + @middle + ' ' + @last
    end

    def print
      puts fullName
      @first + ' ' + @middle + ' ' + @last
    end
  end
  
endajs94@boole:~/CS214/labs/lab08/ruby$ ruby NameTester.rb
ruby: No such file or directory -- NameTester.rb (LoadError)
ajs94@boole:~/CS214/labs/lab08/ruby$ ruby NameTester.rb[1P[1@n
John Paul Jones
Aaron Joseph Santucci
Santucci, Aaron J.
All tests passed!
ajs94@boole:~/CS214/labs/lab08/ruby$ exit

Script done on Wed 05 Apr 2017 02:04:54 PM EDT
