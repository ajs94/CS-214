Script started on Mon 01 May 2017 02:34:58 PM EDT
ajs94@boole:~/CS214/labs/lab10/java$ cat Birds.java Bird.java Duck.java Goose.ja va Owl.java
/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Joel Adams, for CS 214 Lab 10 at Calvin College.
 * Completed by:
 * Date:
 *********************************************************/

public class Birds {
  
  public static void main(String[] args) {
      System.out.println("\nWelcome to the Bird Park!\n");

      Bird bird0 = new Bird();

      Bird bird1 = new Bird("Hawkeye");
      bird1.print();

      Duck bird2 = new Duck("Donald");
      bird2.print();

      Goose bird3 = new Goose("Mother Goose");
      bird3.print();

      Owl bird4 = new Owl("Woodsey");
      bird4.print();
      System.out.println();
    }
}

/* Bird.java provides a Bird class.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Aaron Santucci
 * Date: April 28, 2017
 ******************************************************/

import java.io.*;

public class Bird
{

 /* default constructor
  * PostCond: myName == "".
  */
	public Bird()
	{
		myName = "";
	}


 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
	public Bird(String name)
	{
		myName = name;
	}


 /* Name accessor
  * Return: myName.
  */
	public String getName()
	{
		return myName;
	}


 /* A Bird's Call
  * Return: a default bird-call ("Squawk!").
  */
	public String call()
	{
		return "Squaaaaaaaaaawk!";
	}


 /* Output a Bird 
  * Output: Everything known about myself
  *          to the standard output stream.
  */
	public void print()
	{
		System.out.println( getName() + ' ' + getClass().getName() + " says " + call() );
	}


  private String myName;
}

/* Duck.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Aaron Santucci
 * Date: April 28, 2017
 ******************************************************/

public class Duck extends Bird {
    
 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
	public Duck() {
		super();
	}
	
	public Duck(String name)
	{
		super(name);
	}


 /* A Duck's Call
  * Return: a duck-call ("Quack!").
  */
	public String call()
	{
		return "Quack!";
	}

}

/* Goose.java provides a Goose subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Aaron Santucci
 * Date: April 28, 2017
 ******************************************************/

public class Goose extends Bird {

 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
	public Goose() {
		super();
	}
	
	public Goose(String name)
	{
		super(name);
	}


 /* A Goose's Call
  * Return: a goose-call ("Honk!").
  */
	public String call()
	{
		return "Honk!";
	}

} 

/* Owl.java provides an Owl subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Aaron Santucci
 * Date: April 28, 2017
 ******************************************************/

public class Owl extends Bird {

 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
	public Owl() {
		super();
	}
	
	public Owl(String name)
	{
		super(name);
	}



 /* An Owl's Call
  * Return: an owl-call ("Whoo-hoo!").
  */
	public String call()
	{
		return "Hoot!";
	}

} 

ajs94@boole:~/CS214/labs/lab10/java$ java      make
javac -deprecation Birds.java
ajs94@boole:~/CS214/labs/lab10/java$ java Birds

Welcome to the Bird Park!

Hawkeye Bird says Squaaaaaaaaaawk!
Donald Duck says Quack!
Mother Goose Goose says Honk!
Woodsey Owl says Hoot!

ajs94@boole:~/CS214/labs/lab10/java$ exit

Script done on Mon 01 May 2017 02:35:33 PM EDT
Script started on Fri 28 Apr 2017 03:22:24 PM EDT
ajs94@vonneumann:~/CS214/labs/lab10/ada$ ./birds[3Pmakecat bids.adb bird_package.ads bird_packaage.adb duck_package.ads duck_package.adb goose_package.ads goose_package.adb owll_package.ads owl_package.adb
cat: bids.adb: No such file or directory
-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 28, 2017
---------------------------------------------------

package Bird_Package is
   
   type Bird_Type is tagged private;
   
 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type whose My_Name = Name.       -
 ----------------------------------------------------
   procedure Init(A_Bird : out Bird_Type; Name : in String);

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
   function Name(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
   function Call(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
   function Type_Name(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
   procedure Put(A_Bird : in Bird_Type'Class);

private
   
   type Bird_Type is 
      tagged record
	 My_Name : String(1..6);
      end record;
   

end Bird_Package;
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 28, 2017

---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type in which My_Name = Name.    -
 ----------------------------------------------------
   procedure Init(A_Bird : out Bird_Type; Name : in String) is
   begin
      A_Bird.My_Name := Name;
   end Init;

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
   function Name(A_Bird : in Bird_Type) return String is
   begin
      return A_Bird.My_Name;
   end Name;
   
 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
   function Call(A_Bird : Bird_Type) return String is
   begin
      return "Squawwwwwwk!";
   end Call;
   
 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
   function Type_Name(A_Bird : in Bird_Type) return String is
   begin
      return "Bird";
   end Type_Name;

 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
   procedure Put(A_Bird : in Bird_Type'Class) is
   begin
      Put( Name(A_Bird) );
      Put( ' ' );
      Put( Type_Name(A_Bird) );
      Put( " says " );
      Put( Call(A_Bird) );
   end Put;
   

end Bird_Package;

-- duck_package.ads gives Duck-related declarations,
--
--  and derives Duck from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:
-- Date:
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Duck_Package is
   
   type Duck_Type is new Bird_Type with private;

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
   function Call(A_Duck : in Duck_Type) return String;

 -----------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
   function Type_Name(A_Duck : in Duck_Type) return String;

private
   type Duck_Type is new Bird_Type with
      record
	 null;
      end record;
   

end Duck_Package;
-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:
-- Date:
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
   function Call(A_Duck : in Duck_Type) return String is
   begin
      return "Quack!";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
   function Type_Name(A_Duck : in Duck_Type) return String is
   begin
      return "Duck";
   end Type_Name;


end Duck_Package;
-- goose_package.ads gives Goose-related declarations,
--
--  and derives Goose from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 28, 2017
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Goose_Package is

 type Goose_Type is new Bird_Type with private;


 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose.                      -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
 function Call(A_Goose : in Goose_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose.                       -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
 function Type_Name(A_Goose : in Goose_Type) return String;

private
   type Goose_Type is new Bird_Type with
      record
	 null;
      end record;
   

end Goose_Package;
-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 28, 2017
---------------------------------------------------

package body Goose_Package is

 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose_Type.                 -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
   function Call(A_Goose : in Goose_Type) return String is
   begin
      return "Honk!";
   end Call;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose_Type.                  -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
   
   function Type_Name(A_Goose : in Goose_Type) return String is    
   begin
      return "Goose";   
   end Type_Name;

end Goose_Package;
-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 28, 2017
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Owl_Package is
   
   type Owl_Type is new Bird_Type with private;

 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
   function Call(A_Owl : in Owl_Type) return String;


 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------
   function Type_Name(A_Owl : in Owl_Type) return String;
   
private
   type Owl_Type is new Bird_Type with
      record
	 null;
      end record;
   

end Owl_Package;
-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 28, 2017
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is


 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
   function Call(A_Owl : in Owl_Type) return String is
   begin
      return "Whoo!";
   end Call;
   
 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------
   function Type_Name(A_Owl : in Owl_Type) return String is
   begin
      return "Owl";
   end Type_Name;

end Owl_Package;
ajs94@vonneumann:~/CS214/labs/lab10/ada$ cat bids.adb bird_package.ads bird_packaage.adb duck_package.ads duck_package.adb goose_package.ads goose_package.adb owll_package.ads owl_package.adb[A[A/lab10/ada$ ./birds[K
[K
[K[A[Aajs94@vonneumann:~/CS214/labs/lab10/ada$ ./birds[3Pmake
make: 'birds' is up to date.
ajs94@vonneumann:~/CS214/labs/lab10/ada$ makecat bids.adb bird_package.ads bird_packaage.adb duck_package.ads duck_package.adb goose_package.ads goose_package.adb owll_package.ads owl_package.adb[A[A/lab10/ada$ ./birds[K
[K
[K[A[Aajs94@vonneumann:~/CS214/labs/lab10/ada$ ./birds
Welcome to the Bird Park!
Tweety Bird says Squawwwwwwk!
Donald Duck says Quack!
Mother Goose says Honk!
Woodsy Owl says Whoo!

ajs94@vonneumann:~/CS214/labs/lab10/ada$ exit

Script done on Fri 28 Apr 2017 03:22:36 PM EDT
Script started on Mon 01 May 2017 01:37:42 PM EDT
ajs94@boole:~/CS214/labs/lab10/ruby$ cat bids.rb     rds.rb bi  Bird.rb Owl.rb Duck.rb Q Goose.r b
# birds.rb | Tests out the menagerie of bird classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Aaron Santucci
# Date: April 28, 2017
######################################################

require './Bird.rb'
require './Duck.rb'
require './Goose.rb'
require './Owl.rb'

puts "\nWelcome to the Bird Park!\n\n"

bird0 = Bird.new "Hawkeye"
bird0.print

bird1 = Duck.new "Donald"
bird1.print

bird2 = Goose.new "Mother"
bird2.print

bird3 = Owl.new "Woodsey"
bird3.print

puts "\n\n"# Bird.rb | Defines a Bird superclass 
#   to be extended by specific bird sub-classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Aaron Santucci
# Date: April 28, 2017
####################################################

class Bird

  attr_reader :name

  def initialize(name)
    @name = name
  end
  
  def call
    'Squaaaaaaaaak!'
  end
  
  def className
    self.class.to_s
  end
  
  def print
    puts name + className + " says " + call
  end

end
# Owl.rb | Defines the Owl class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Aaron Santucci
# Date: April 28, 2017
####################################################

require './Bird.rb'

class Owl < Bird

  def call
    'Hoot!'
  end
  
  def className
    self.class.to_s
  end
  
  def print
    puts name + className + " says " + call
  end
  
end
# Duck.rb | Defines the Duck class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Aaron Santucci
# Date: April 28, 2017
####################################################

require './Bird.rb'

class Duck < Bird

  def call
    'Quack!'
  end
  
  def className
    self.class.to_s
  end
  
  def print
    puts name + className + " says " + call
  end
  
end
# Goose.rb | Defines the Goose class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Aaron Santucci
# Date: April 28, 2017
####################################################

require './Bird.rb'

class Goose < Bird

  def call
    'Quack!'
  end
  
  def className
    self.class.to_s
  end
  
  def print
    puts name + className + " says " + call
  end
  
end
ajs94@boole:~/CS214/labs/lab10/ruby$ ruby Bi  birds.rb

Welcome to the Bird Park!

HawkeyeBird says Squaaaaaaaaak!
DonaldDuck says Quack!
MotherGoose says Quack!
WoodseyOwl says Hoot!


ajs94@boole:~/CS214/labs/lab10/ruby$ exit

Script done on Mon 01 May 2017 01:38:17 PM EDT
Script started on Mon 01 May 2017 02:25:39 PM EDT
ajs94@boole:~/CS214/labs/lab10/elisp$ cat lab10_part1.el a lab10_part2.el
;;; lab10_part1.el
;;;
;;; Aaron Santucci
;;; Date April 28, 2017
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Exercise 1a
;;;;;;;;;;;;;;;;;;
(lambda (a b c d) (max (abs a) (abs b) (abs c) (abs d)) )

;;;Exercise 1b
;;;;;;;;;;;;;;;;;;
(defun add (x y z)
  (+ x y z))
add
(defun makeNull(x)
  (null x))
makeNull
(defun seventeenPointTwo()
  17.2)
seventeenPointTwo

(add 1 2 3)
6
(makeNull 14)
nil
(seventeenPointTwo)
17.2
;;; lab10_part2.el lab10 CS 214
;;;
;;; Aaron Santucci
;;; Date April 28, 2017
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Exercise 1
;;;;;;;;;;;;;;;;;;

(setq double (function (lambda (x) (+ x x)) ))
(lambda (x) (+ x x))

(funcall double 11)
22

(setq triple (function (lambda (x) (+ x x x)) ))
(lambda (x) (+ x x x))

(funcall triple 11)
33

;;; Exercise 2
;;;;;;;;;;;;;;;;;;
(defun sum-squares(list)
  (apply '+ (mapcar '(lambda (x) (expt x 2)) list))
  )
sum-squares

(sum-squares '(1 2 3))          ; 14
14

(sum-squares '(1 2 3 4 5))      ; 55
55

(sum-squares '(-1 -2 -3 0 1))   ; 15
15

ajs94@boole:~/CS214/labs/lab10/elisp$ exit

Script done on Mon 01 May 2017 02:26:03 PM EDT
