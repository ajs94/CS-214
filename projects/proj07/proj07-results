Script started on Tue 04 Apr 2017 01:58:12 PM EDT
ajs94@hopper:~/CS214/projects/proj07$ cat NameTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Aaron Santucci
 * Date: April 4, 2017
 ************************************************************/

import java.util.Scanner;

public class NameTester  
{
	public static void main(String[] args)
	{
		Name aName = new Name("John", "Paul", "Jones");

		assert aName.getFirst().equals("John") ;
		assert aName.getMiddle().equals("Paul") ;
		assert aName.getLast().equals("Jones") ;

		System.out.println(aName);
		assert aName.toString().equals("John Paul Jones");
		
		// project tests
		aName.changeFirst("Aaron");
		aName.changeMiddle("Joseph");
		aName.changeLast("Santucci");
		
		assert aName.getFirst().equals("Aaron") ;
		assert aName.getMiddle().equals("Joseph");
		assert aName.getLast().equals("Santucci");
		
		System.out.println(aName);
		System.out.println(aName.lfmi());
		assert aName.lfmi().equals("Santucci, Aaron J.");
		
		aName.readName();
		System.out.println(aName);
		System.out.println(aName.lfmi());

		System.out.println("All tests passed!");
	}
}



class Name 
{
	private String myFirst,
		myMiddle,
		myLast;
	
	public Name(String first, String middle, String last)
	{
		myFirst = first;
		myMiddle = middle;
		myLast = last;
	}
	
	public String toString()
	{
		return myFirst + ' ' + myMiddle + ' ' + myLast;
	}
	
	// return in form "Last, First MiddleInitial."
	public String lfmi() {
		return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";	
	}
	
	// readName method to read in characters
	public void readName()
	{
		Scanner keyboard = new Scanner(System.in);
		System.out.println("\nEnter the first, middle, and last names: ");
      	myFirst = keyboard.next();
		myMiddle = keyboard.next();
      	myLast = keyboard.next();
	}
	
	// getter methods
	public String getFirst()	{
		return myFirst;		}
	
	public String getMiddle()	{
		return myMiddle;	}
	
	public String getLast()	{
		return myLast;		}
	
	// mutator methods
	public void changeFirst(String aFirst) {
		myFirst = aFirst;	}
	
	public void changeMiddle(String aMiddle) {
		myMiddle = aMiddle;	}
	
	public void changeLast(String aLast) {
		myLast = aLast;	}
	
}









ajs94@hopper:~/CS214/projects/proj07$ make clean
rm -f *.class *.o *.ali *~ name_tester
ajs94@hopper:~/CS214/projects/proj07$ make java
javac -deprecation NameTester.java
ajs94@hopper:~/CS214/projects/proj07$ java NameTester
John Paul Jones
Aaron Joseph Santucci
Santucci, Aaron J.

Enter the first, middle, and last names: 
Joel C Name    Adams
Joel C Adams
Adams, Joel C.
All tests passed!
ajs94@hopper:~/CS214/projects/proj07$ exit

Script done on Tue 04 Apr 2017 01:58:57 PM EDT
Script started on Tue 04 Apr 2017 02:57:32 PM EDT
ajs94@hopper:~/CS214/projects/proj07$ cat name_tester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: March 29, 2017
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is
   
   NAME_SIZE : constant Integer := 8;
   
   type Name is
   record
      MyFirst, MyMiddle, MyLast : String (1 .. NAME_SIZE);
   end record;


   aName : Name ; 


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------
     
     procedure Init(TheName : out Name ; First, Middle, Last : in String) is
     begin
	TheName.MyFirst := First;
	TheName.MyMiddle := Middle;
	TheName.MyLast := Last;
     end Init;


  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------
     
     function GetFirst(TheName : in Name) return String is
     begin
	return TheName.MyFirst;
     end GetFirst;
     
     function GetMiddle(TheName : in Name) return String is
     begin
	return TheName.MyMiddle;
     end GetMiddle;

     function GetLast(TheName : in Name) return String is
     begin
	return TheName.MyLast;
     end GetLast;
     
  ------------------------------------------------
  -- mutator methods for Name items   
  -- Receive: TheName, a Name
  --          A*Name*, a String
  ------------------------------------------------
     
     procedure ChangeFirst(TheName : out Name ; AFirst : in String) is
     begin
	TheName.MyFirst := AFirst;
     end ChangeFirst;
     
     procedure ChangeMiddle(TheName : in out Name ; AMiddle : in String) is
     begin
	TheName.MyMiddle := AMiddle;
     end ChangeMiddle;
     
     procedure ChangeLast(TheName : in out Name ; ALast : in String) is
     begin
	TheName.MyLast := ALast;
     end ChangeLast;
     
     
  --------------------------------------------------
  -- lfmi(Name) displays a Name value in lfmi form -
  -- PRE: theName has been initialized.            -
  -- Receive: theName, a Name.                     -
  -- Output: the Name in form Last,First MiddeInitial.
  ----------------------------------------------
     
     function Lfmi(TheName : in Name) return String is
     begin
	return TheName.MyLast & ", " & TheName.MyFirst & " " & TheName.MyMiddle(TheName.MyMiddle'First) & ".";
     end Lfmi;
	
     
  -----------------------------------------------------------------
  -- readName(Name) changes the first midde and last names from input -
  -- PRE: theName has been initialized.                           -
  -- Receive: theName, a Name.                                    -
  -- Output: the altered Name object                              -
  -----------------------------------------------------------------
     
     procedure ReadName(TheName : in out Name) is
	S : String(1 .. NAME_SIZE) := (others => ' ');
	Last : Integer;
     begin
	Put_Line("Enter the first, middle, and last, names: ");
	Get_Line(S, Last);
	TheName.MyFirst := S;
	Get_Line(S, Last);
	TheName.MyMiddle := S;
	Get_Line(S, Last);
	TheName.MyLast := S;  
     end ReadName;
     
     
  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------
     
     function getFullName(TheName : in Name) return String is
     begin
	return TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast;
     end getFullName;
     

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------
     
     procedure Put(TheName : in Name) is
     begin
	Put_Line(GetFullName(TheName));
     end Put;


begin
   Init(aName, "John    ", "Paul    ", "Jones   ");

   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                    "getFullName() failed");

   Put(aName); New_line;
   
   ChangeFirst(aName, "Aaron   ");
   ChangeMiddle(AName, "Joseph  ");
   ChangeLast(AName, "Santucci");
   
   pragma Assert( getFirst(aName) = "Aaron   ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Joseph  ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Santucci", "getLast() failed");
   pragma Assert( getFullName(aName) = "Aaron   Joseph  Santucci", 
		  "getFullName() failed");
   
   Put(aName);
   Put(Lfmi(AName)); New_Line;
   
   ReadName(AName);
   Put(aName);
   Put(Lfmi(AName)); New_Line;
   
   Put("All tests passed!"); New_line;

end name_tester;

ajs94@hopper:~/CS214/projects/proj07$ make ada
make: Nothing to be done for 'ada'.
ajs94@hopper:~/CS214/projects/proj07$ ./  name_tester
John     Paul     Jones   

Aaron    Joseph   Santucci
Santucci, Aaron    J.
Enter the first, middle, and last, names: 
joe   Joel
C     
Adams
Joel     C        Adams   
Adams   , Joel     C.
All tests passed!
ajs94@hopper:~/CS214/projects/proj07$ exit

Script done on Tue 04 Apr 2017 02:58:27 PM EDT
Script started on Tue 04 Apr 2017 03:49:20 PM EDT
ajs94@hopper:~/CS214/projects/proj07$ cat NameTester.el
cat: NameTester.el: No such file or directory
ajs94@hopper:~/CS214/projects/proj07$ cat NameTester.el[1P[1@n
;;; nameTester.el simulates and tests an e-LISP Name type.
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Aaron Santucci
;;; Date: April 4, 2017


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Name constructs a name from three strings.      ;;
;;; Receive: first, middle and last, three strings. ;;
;;; Return: the triplet (first middle last).        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun Name (first middle last)
  (list first middle last))
Name


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getter methods for the Name item                 ;
;;; Receive: theName, a Name.                       
;;; Return: the respective string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getFirst(theName)
  (car theName))
getFirst

(defun getMiddle(theName)
  (car (cdr theName)))
getMiddle

(defun getLast(theName)
  (car (cdr (cdr theName))))
getLast

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; mutator methods for the Name item                 ;
;;; Receive: theName, a Name.                       
;;; Return: the respective string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun changeFirst(theName aFirst)
  (setf (nth 0 theName) aFirst))
changeFirst

(defun changeMiddle(theName aMiddle)
  (setf (nth 1 theName) aMiddle))
changeMiddle

(defun changeLast(theName aLast)
  (setf (nth 2 theName) aLast))
changeLast


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi return the full name in L-F-MiddleInitial ;
;;; Return: myLast, myFirst, String MiddleInitial  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun lfmi(theName)
  (concat (getLast theName) ", " (getFirst theName) " " (substring (getMiddle theName) 0 1) ".")
  )
lfmi


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName returns a full name in F-M-L order. 
;;; Return: myFirst, myMiddle, myLast.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getFullName(theName)
  (concat (getFirst theName) " " (getMiddle theName) " " (getLast theName)))
getFullName


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName displays a name object.         
;;; Receive: theName, a Name;                 
;;;          buffer, the name of a buffer.   
;;; Output: the strings in theName to buffer. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun printName(theName buffer)
  (princ (getFullName theName) buffer)
  theName)
printName


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver for our Name functions. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (require 'cl)                              ; assert
  (setq aName (Name "John" "Paul" "Jones"))  ; build a Name

  (assert (equal (getFirst aName) "John" ))  ; test it
  (assert (equal (getMiddle aName) "Paul" ))
  (assert (equal (getLast aName) "Jones" ))
  (assert (equal (getFullName aName) "John Paul Jones" ))

  (setq buf (get-buffer "nameTester.el"))    ; buf = this buffer
  (assert (eq (printName aName buf) aName ) ) ; output
  (terpri buf)                               ; newline
  (princ "All tests passed!" buf)            ; feedback
  (terpri buf)                               ; newline

  ;;; project tests
  (changeFirst aName "Aaron")
  (changeMiddle aName "Joseph")
  (changeLast aName "Santucci")

  (assert (equal (getFirst aName) "Aaron" ))
  (assert (equal (getMiddle aName) "Joseph" ))
  (assert (equal (getLast aName) "Santucci" ))
  (assert (eq (printName aName buf) aName))
  (assert (equal (lfmi aName) "Santucci, Aaron J." ))

  )



;;; Testing ;;;
John Paul Jones
All tests passed!
t

ajs94@hopper:~/CS214/projects/proj07$ exit

Script done on Tue 04 Apr 2017 03:49:39 PM EDT
Script started on Tue 04 Apr 2017 03:49:54 PM EDT
ajs94@hopper:~/CS214/projects/proj07$ cat NameTester.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Aaron Santuccci
# Date: April 4, 2017
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name
  
  def initialize(first, middle, last)
    @first, @middle, @last = first, middle, last
  end
  
  attr_accessor :first, :middle, :last
  
  def lfmi
    @last + ', ' + @first + ' ' + @middle[0,1] + '.'
  end
  
  def readName
    puts "Enter the first, middle, and last names: "
    @first = gets.chomp
    @middle = gets.chomp
    @last = gets.chomp
  end
  
  def fullName
    @first + ' ' + @middle + ' ' + @last
  end
  
  def print
    puts fullName
    @first + ' ' + @middle + ' ' + @last
  end
  
end


def testName
  name = Name.new("John", "Paul", "Jones")

  assert name.first == "John", "first failed"
  assert name.middle == "Paul", "middle failed"
  assert name.last == "Jones", "last failed"
  assert name.fullName == "John Paul Jones", "fullName failed"
  assert name.print == "John Paul Jones", "print failed"

  #project tests
  name.first = "Aaron"
  name.middle = "Joseph"
  name.last = "Santucci"
  
  assert name.first == "Aaron", "first failed"
  assert name.middle == "Joseph", "middle failed"
  assert name.last == "Santucci", "last failed"
  assert name.fullName == "Aaron Joseph Santucci", "fullName failed"
  assert name.print == "Aaron Joseph Santucci", "print failed"
  puts name.lfmi
  assert name.lfmi == "Santucci, Aaron J.", "lfmi failed"
  
  name.readName
  name.print
  puts name.lfmi
  
  print "All tests passed!\n"
end

testName

ajs94@hopper:~/CS214/projects/proj07$ ruby NameTester.rb
John Paul Jones
Aaron Joseph Santucci
Santucci, Aaron J.
Enter the first, middle, and last names: 
Joel
C
Adams
Joel C Adams
Adams, Joel C.
All tests passed!
ajs94@hopper:~/CS214/projects/proj07$ exit

Script done on Tue 04 Apr 2017 03:50:16 PM EDT
