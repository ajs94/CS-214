Script started on Mon 10 Apr 2017 03:11:07 PM EDT
ajs94@boole:~/CS214/projects/proj08/java$ cat TempTester.java Tep mperature.java
/* TempTester.java is the temperature class tester program
 * Student: Aaron Santucci
 * Date: April 10, 2017
 ****************************************************************************/


public class TempTester
{
	public static void main (String [] args)
	{
		Temperature baseTemp = new Temperature(0.0, 'F');
		Temperature limitTemp = new Temperature(100.0, 'C');
		double stepValue = 2.5;
	
		System.out.println("\n");
		
		while (baseTemp.lessThan(limitTemp))
		{
			System.out.println("Fahrenheit " + baseTemp.getFahren() + "\t" + "Celcius " + baseTemp.getCelcius() + "\t" + "Kelvin " + baseTemp.getKelvin());
			baseTemp.raise(stepValue);
		}
		
		System.out.println("\n");
		
		baseTemp = new Temperature(0.0, 'K');
		limitTemp = new Temperature(212.0, 'F');
		stepValue = 20.0;
		
		while (baseTemp.lessThan(limitTemp))
		{
			System.out.println("Fahrenheit " + baseTemp.getFahren() + "\t" + "Celcius " + baseTemp.getCelcius() + "\t" + "Kelvin " + baseTemp.getKelvin());
			baseTemp.raise(stepValue);
		}
	}
	
	
}/* Temperature.java is the temperature class
 * Student: Aaron Santucci
 * Date: April 10, 2017
 ****************************************************************************/

import java.util.Arrays;

class Temperature
{
	
	private double myDegrees;
	private char myScale;
	private char[] validScales = {'F', 'C', 'K', 'f', 'c', 'k'};
	
	
	public Temperature (double degrees, char scale)
	{
		if (validScale(scale))
			myScale = scale;
		else {
			System.out.println("Not a valid temperature; setting to default Fahrenheit");
			myScale = 'F';
		}
		
		myDegrees = degrees;
	}
	
	public boolean validScale(char scale)	{
		for (int i=0; i<validScales.length; i++)
		{
			if(scale == validScales[i])
				return true;
		}
		return false;
	}
	
	
	/* printTemp() prints the temperature of the Temperature object
	***********************************************/
	public void printTemp()		{
		System.out.print( myDegrees + " " + myScale);	}
	
						   
	/* getter methods for the temperature class
	 * return: the respective class object
	 ***********************************************/
	public double getDegrees()	{
		return myDegrees;	}
						   
	public char getScale()	{
		return myScale;		}
	
	
	/* converter methods for the Temperature class
	 * return: the respective double temperature
	 ***********************************************/
	public double getFahren()		
	{
		if (myScale == 'F' || myScale == 'f')
			return myDegrees;
		else if (myScale == 'C' || myScale == 'c')
			return ((myDegrees - 32) * 5 ) / 9;
		else if (myScale == 'K' || myScale == 'k')
			return ((myDegrees *9) / 5 ) - 459.67;
		else
			return 0;	
	}
			   
	public double getCelcius()		
	{
		if (myScale == 'C' || myScale == 'c')
			return myDegrees;
		else if (myScale == 'F' || myScale == 'f')
			return ((myDegrees - 32) * 5 ) / 9;
		else if (myScale == 'K' || myScale == 'k')
			return myDegrees - 273.15;
		else
			return 0;	
	}
					   
	public double getKelvin()		
	{
		if (myScale == 'K' || myScale == 'k')
			return myDegrees;
		else if (myScale == 'F' || myScale == 'f')
			return ((myDegrees + 459.67) * 5 ) / 9;
		else if (myScale == 'C' || myScale == 'c')
			return myDegrees - 273.15;
		else
			return 0;	
	}
	
	/* raise(double degrees) increases myDegrees by degrees
	 * param: degrees: the addend to myDegrees
	 ***********************************************/
	public void raise (double degrees)	{
		myDegrees += degrees;	}
	
	/* lower(double degrees) decreases myDegrees by degrees
	 * param: degrees: the number stracted from myDegrees
	 ***********************************************/
	public void lower (double degrees)	{
		myDegrees -= degrees;	}
	
	
	/* equals() checks if two Temperature objects are equal in Degrees
	 * param: Temperature temp: the right hand operand
	 * return: boolean of equality operator for their degrees
	 ***********************************************/
	public boolean equals (Temperature Temp)	
	{
		if (myScale == Temp.myScale)	{
			return (myDegrees == Temp.myDegrees);
		}
		else if (myScale == 'F' || myScale == 'f')	{
			return (myDegrees == Temp.getFahren());
		}
		else if (myScale == 'C' || myScale == 'c')	{
			return (myDegrees == Temp.getCelcius());
		}
		else if (myScale == 'K' || myScale == 'k')	{
			return (myDegrees == Temp.getKelvin());
		}
		else
			return false;
	}
				
	/* lessThan() checks if this Temperature is less than another
	 * param: Temperature temp: the right hand operand
	 * return: boolean of equality operator for their degrees
	 ***********************************************/
	public boolean lessThan (Temperature Temp)	
	{
		if (myScale == Temp.myScale)	{
			return (myDegrees < Temp.myDegrees);
		}
		else if (myScale == 'F' || myScale == 'f')	{
			return (myDegrees < Temp.getFahren());
		}
		else if (myScale == 'C' || myScale == 'c')	{
			return (myDegrees < Temp.getCelcius());
		}
		else if (myScale == 'K' || myScale == 'k')	{
			return (myDegrees < Temp.getKelvin());
		}
		else
			return false;
	}
						   
}
	
	
	
	
	ajs94@boole:~/CS214/projects/proj08/java$ javac -deprecation TempTester.java
ajs94@boole:~/CS214/projects/proj08/java$ javac -deprecation TempTester.java[1P[1P[1P[1P[1P[1P[1@e[1@r[1@a[1@t[1@u[1@r[1@e
ajs94@boole:~/CS214/projects/proj08/java$ java TempTester. 


Fahrenheit 0.0	Celcius -17.77777777777778	Kelvin 255.3722222222222
Fahrenheit 2.5	Celcius -16.38888888888889	Kelvin 256.7611111111111
Fahrenheit 5.0	Celcius -15.0	Kelvin 258.15
Fahrenheit 7.5	Celcius -13.61111111111111	Kelvin 259.5388888888889
Fahrenheit 10.0	Celcius -12.222222222222221	Kelvin 260.92777777777775
Fahrenheit 12.5	Celcius -10.833333333333334	Kelvin 262.31666666666666
Fahrenheit 15.0	Celcius -9.444444444444445	Kelvin 263.7055555555555
Fahrenheit 17.5	Celcius -8.055555555555555	Kelvin 265.09444444444443
Fahrenheit 20.0	Celcius -6.666666666666667	Kelvin 266.48333333333335
Fahrenheit 22.5	Celcius -5.277777777777778	Kelvin 267.8722222222222
Fahrenheit 25.0	Celcius -3.888888888888889	Kelvin 269.2611111111111
Fahrenheit 27.5	Celcius -2.5	Kelvin 270.65
Fahrenheit 30.0	Celcius -1.1111111111111112	Kelvin 272.0388888888889
Fahrenheit 32.5	Celcius 0.2777777777777778	Kelvin 273.42777777777775
Fahrenheit 35.0	Celcius 1.6666666666666667	Kelvin 274.81666666666666
Fahrenheit 37.5	Celcius 3.0555555555555554	Kelvin 276.2055555555555


Fahrenheit -459.67	Celcius -273.15	Kelvin 0.0
Fahrenheit -423.67	Celcius -253.14999999999998	Kelvin 20.0
Fahrenheit -387.67	Celcius -233.14999999999998	Kelvin 40.0
Fahrenheit -351.67	Celcius -213.14999999999998	Kelvin 60.0
Fahrenheit -315.67	Celcius -193.14999999999998	Kelvin 80.0
Fahrenheit -279.67	Celcius -173.14999999999998	Kelvin 100.0
Fahrenheit -243.67000000000002	Celcius -153.14999999999998	Kelvin 120.0
Fahrenheit -207.67000000000002	Celcius -133.14999999999998	Kelvin 140.0
Fahrenheit -171.67000000000002	Celcius -113.14999999999998	Kelvin 160.0
Fahrenheit -135.67000000000002	Celcius -93.14999999999998	Kelvin 180.0
Fahrenheit -99.67000000000002	Celcius -73.14999999999998	Kelvin 200.0
Fahrenheit -63.670000000000016	Celcius -53.14999999999998	Kelvin 220.0
Fahrenheit -27.670000000000016	Celcius -33.14999999999998	Kelvin 240.0
Fahrenheit 8.329999999999984	Celcius -13.149999999999977	Kelvin 260.0
Fahrenheit 44.329999999999984	Celcius 6.850000000000023	Kelvin 280.0
Fahrenheit 80.32999999999998	Celcius 26.850000000000023	Kelvin 300.0
Fahrenheit 116.32999999999998	Celcius 46.85000000000002	Kelvin 320.0
Fahrenheit 152.32999999999998	Celcius 66.85000000000002	Kelvin 340.0
Fahrenheit 188.32999999999998	Celcius 86.85000000000002	Kelvin 360.0
ajs94@boole:~/CS214/projects/proj08/java$ exit

Script done on Mon 10 Apr 2017 03:12:17 PM EDT
Script started on Tue 11 Apr 2017 02:12:23 PM EDT
ajs94@wirth:~/CS214/projects/proj08/ada$ cat [Kajs94@wirth:~/CS214/projects/proj08/ada$ cat temp_tester.adb temperature.ads temperature.adb
-- temp_tester.adb "test-drives" the Temperature package.
-- By: Aaron Santucci
-- Date: April 11, 2017
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;
with Temperature; use Temperature;

procedure Temp_Tester is
   BaseTemp : Temperature.Temperature;
   LimitTemp : Temperature.Temperature;
   StepValue : Float;
begin
   
   -- Test 1
   Init(BaseTemp, 0.0, 'F');
   Init(LimitTemp, 100.0, 'C');
   StepValue := 2.5;
   
   loop
      if LessThan(BaseTemp, LimitTemp) then
	 Put("Fahrenheit "); Put(GetFahren(BaseTemp));        Put("     ");
	 Put("Celcius ");    Put(GetCelcius(BaseTemp)); Put("     ");
	 Put("Kelvin "); Put(GetKelvin(BaseTemp));
	 New_Line;
	 RaiseTemp(BaseTemp, StepValue);
      else
	 exit;
      end if;
   end loop;
   
   New_Line;
   --Test 2
   Init(BaseTemp, 0.0, 'K');
   Init(LimitTemp, 212.0, 'F');
   StepValue := 20.0;
   
   loop
      if LessThan(BaseTemp, LimitTemp) then
	 Put("Fahrenheit "); Put(GetFahren(BaseTemp));        Put("     ");
	 Put("Celcius ");    Put(GetCelcius(BaseTemp)); Put("     ");
	 Put("Kelvin "); Put(GetKelvin(BaseTemp));
	 New_Line;
	 RaiseTemp(BaseTemp, StepValue);
      else
	 exit;
      end if;
   end loop;
   
end Temp_Tester;

-- temperature.adb declare the name and operations
--      for the temperature type
-- by: Aaron Santucci
-- Date April 11, 2017
-------------------------------------------------

package Temperature is
   
   type Temperature is private;
   
   procedure Init (TheTemp : out Temperature ; Degrees : in Float ;  Scale : in Character);
   
   function GetDegree(TheTemp : in Temperature) return Float;
   function GetScale(TheTemp : in Temperature) return Character;
   
   function GetFahren(TheTemp : in Temperature) return Float;
   function GetCelcius(TheTemp : in Temperature) return Float;
   function GetKelvin(TheTemp : in Temperature) return Float;
   
   procedure raiseTemp(TheName : out Temperature ; Degrees : in Float);
   procedure lowerTemp(TheName : out Temperature ; Degrees : in Float);
   
   function Equals(TheTemp, ATemp : in Temperature) return Boolean;
   function LessThan(TheTemp, ATemp : in Temperature) return Boolean;
   
   
private
   
   type Temperature is
      record
	 MyDegrees : Float := 0.0;
	 MyScale : Character := 'F';
      end record;
   
end Temperature;
-- temperature.adb defines the operations for the
--      temperature type
-- by: Aaron Santucci
-- Date April 10, 2017
-------------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

package body Temperature is
   
   ------------------------------------------------------
   -- Init initializes a Temperature variable           -
   -- Receive: theTemp, a Temperature variable          -
   --          degrees, the initial number of degrees   -
   --          scale, the temperature unit character    -
   -- Return: the class variables myDegree and myScale  -
   --         set to degree and scale                   -
   ------------------------------------------------------
   procedure Init (TheTemp : out Temperature ; Degrees : in Float ;  Scale : in Character) is
   begin
      TheTemp.MyDegrees := Degrees;
      TheTemp.MyScale := Scale;
   end Init;
   
   
   ------------------------------------------------------
   -- getter methods for the temperature class          -
   -- Receive: TheTemp, a temperature                   -
   -- PRE: TheTemp is initialized                       -
   -- Return: the package variable desired              -
   ------------------------------------------------------
   function GetDegree(TheTemp : in Temperature) return Float is
   begin
      return TheTemp.MyDegrees;
   end GetDegree;
   
   function GetScale(TheTemp : in Temperature) return Character is
   begin
      return TheTemp.MyScale;
   end GetScale;
   
   
   ------------------------------------------------------
   -- converter methods for the temperature class       -
   -- Receive: TheTemp, a temperature                   -
   -- PRE: TheTemp is initialized                       -
   -- Return: myDegrees converted to the wanted scale   -
   ------------------------------------------------------
   function GetFahren(TheTemp : in Temperature) return Float is
   begin
      
      if TheTemp.myScale = 'F' 
	or TheTemp.myScale = 'f' then
	 return TheTemp.myDegrees;
	 
      elsif TheTemp.myScale = 'C' 
	or TheTemp.myScale = 'c' then
	 return ((TheTemp.myDegrees - 32.0) * 5.0 ) / 9.0;
	 
      elsif TheTemp.myScale = 'K' 
	or TheTemp.myScale = 'k' then
	 return ((TheTemp.myDegrees *9.0) / 5.0 ) - 459.67;
	 
      else
	 return 0.0;
      end if;
      
   end GetFahren;
   
   function GetCelcius(TheTemp : in Temperature) return Float is
   begin
      
      if TheTemp.myScale = 'C' 
	or TheTemp.myScale = 'c' then
	 return TheTemp.myDegrees;
	 
      elsif TheTemp.myScale = 'F' 
	or TheTemp.myScale = 'f' then
	 return ((TheTemp.myDegrees - 32.0) * 5.0 ) / 9.0;
	 
      elsif TheTemp.myScale = 'K' 
	or TheTemp.myScale = 'k' then
	 return TheTemp.myDegrees - 273.15;
	 
      else
	 return 0.0;
      end if;
      
   end GetCelcius;
   
   function GetKelvin(TheTemp : in Temperature) return Float is
   begin
      
      if TheTemp.myScale = 'K' 
	or TheTemp.myScale = 'k' then
	 return TheTemp.myDegrees;
	 
      elsif TheTemp.myScale = 'F' 
	or TheTemp.myScale = 'f' then
	 return ((TheTemp.myDegrees + 459.67) * 5.0 ) / 9.0;
	 
      elsif TheTemp.myScale = 'C' 
	or TheTemp.myScale = 'c' then
	 return TheTemp.myDegrees - 273.15;
	 
      else
	 return 0.0;
      end if;
      
   end GetKelvin;
   
   
   ------------------------------------------------------
   -- raiseTemp() and lowerTemp() in/descrease myDegree resp.   -
   -- Receive: TheTemp, a temperature                   -
   --          Temp, a float to be add/subtracted into  -
   ------------------------------------------------------
   procedure raiseTemp(TheName : out Temperature ; Degrees : in Float) is
   begin
      TheName.MyDegrees := TheName.MyDegrees + Degrees;
   end raiseTemp;
   
   procedure lowerTemp(TheName : out Temperature ; Degrees : in Float) is
   begin
      TheName.MyDegrees := TheName.MyDegrees - Degrees;
   end lowerTemp;
   
   
   ------------------------------------------------------
   -- equals() tells if two temperatures are equivalent -
   -- Receive: TheTemp, the left temperature            -
   --          ATemp, the right temperature             -
   -- Return: boolean of the equality operation         -
   ------------------------------------------------------
   function Equals(TheTemp, ATemp : in Temperature) return Boolean is
   begin
      
      if TheTemp.MyScale = ATemp.MyScale then
	return (TheTemp.myDegrees = ATemp.MyDegrees);
	
      elsif TheTemp.myScale = 'F' 
	or TheTemp.myScale = 'f' then
	 return (TheTemp.myDegrees = getFahren(ATemp));
	 
      elsif TheTemp.myScale = 'C' 
	or TheTemp.myScale = 'c' then
	 return (TheTemp.MyDegrees = GetCelcius(ATemp));
	 
      elsif TheTemp.myScale = 'K' 
	or TheTemp.myScale = 'k' then
	 return (TheTemp.myDegrees = GetKelvin(ATemp));
	 
      else
	 return false;
      end if;
   end Equals;
   
   ------------------------------------------------------
   -- lessThan() tells if a temperature is less than another  -
   -- Receive: TheTemp, the left temperature            -
   --          ATemp, the right temperature             -
   -- Return: boolean of the less than operation        -
   ------------------------------------------------------
   function LessThan(TheTemp, ATemp : in Temperature) return Boolean is
   begin
      
      if TheTemp.MyScale = ATemp.MyScale then
	return (TheTemp.myDegrees < ATemp.MyDegrees);
	
      elsif TheTemp.myScale = 'F' 
	or TheTemp.myScale = 'f' then
	 return (TheTemp.myDegrees < getFahren(ATemp));
	 
      elsif TheTemp.myScale = 'C' 
	or TheTemp.myScale = 'c' then
	 return (TheTemp.MyDegrees < GetCelcius(ATemp));
	 
      elsif TheTemp.myScale = 'K' 
	or TheTemp.myScale = 'k' then
	 return (TheTemp.myDegrees < GetKelvin(ATemp));
	 
      else
	 return false;
      end if;
   end LessThan;
   
end Temperature;

ajs94@wirth:~/CS214/projects/proj08/ada$ gnatmake temp_tester.adb
gnatmake: "temp_tester" up to date.
ajs94@wirth:~/CS214/projects/proj08/ada$ gnatmake temp_tester.adb[1P[1P[1P[1P[1P[1P[1P[1@e[1@r[1@a[1@t[1@u[1@r[1@e
ajs94@wirth:~/CS214/projects/proj08/ada$ gnatmake temperature.adb  ds
ajs94@wirth:~/CS214/projects/proj08/ada$ ./temp_tester
Fahrenheit  0.00000E+00     Celcius -1.77778E+01     Kelvin  2.55372E+02
Fahrenheit  2.50000E+00     Celcius -1.63889E+01     Kelvin  2.56761E+02
Fahrenheit  5.00000E+00     Celcius -1.50000E+01     Kelvin  2.58150E+02
Fahrenheit  7.50000E+00     Celcius -1.36111E+01     Kelvin  2.59539E+02
Fahrenheit  1.00000E+01     Celcius -1.22222E+01     Kelvin  2.60928E+02
Fahrenheit  1.25000E+01     Celcius -1.08333E+01     Kelvin  2.62317E+02
Fahrenheit  1.50000E+01     Celcius -9.44444E+00     Kelvin  2.63706E+02
Fahrenheit  1.75000E+01     Celcius -8.05556E+00     Kelvin  2.65094E+02
Fahrenheit  2.00000E+01     Celcius -6.66667E+00     Kelvin  2.66483E+02
Fahrenheit  2.25000E+01     Celcius -5.27778E+00     Kelvin  2.67872E+02
Fahrenheit  2.50000E+01     Celcius -3.88889E+00     Kelvin  2.69261E+02
Fahrenheit  2.75000E+01     Celcius -2.50000E+00     Kelvin  2.70650E+02
Fahrenheit  3.00000E+01     Celcius -1.11111E+00     Kelvin  2.72039E+02
Fahrenheit  3.25000E+01     Celcius  2.77778E-01     Kelvin  2.73428E+02
Fahrenheit  3.50000E+01     Celcius  1.66667E+00     Kelvin  2.74817E+02
Fahrenheit  3.75000E+01     Celcius  3.05556E+00     Kelvin  2.76206E+02

Fahrenheit -4.59670E+02     Celcius -2.73150E+02     Kelvin  0.00000E+00
Fahrenheit -4.23670E+02     Celcius -2.53150E+02     Kelvin  2.00000E+01
Fahrenheit -3.87670E+02     Celcius -2.33150E+02     Kelvin  4.00000E+01
Fahrenheit -3.51670E+02     Celcius -2.13150E+02     Kelvin  6.00000E+01
Fahrenheit -3.15670E+02     Celcius -1.93150E+02     Kelvin  8.00000E+01
Fahrenheit -2.79670E+02     Celcius -1.73150E+02     Kelvin  1.00000E+02
Fahrenheit -2.43670E+02     Celcius -1.53150E+02     Kelvin  1.20000E+02
Fahrenheit -2.07670E+02     Celcius -1.33150E+02     Kelvin  1.40000E+02
Fahrenheit -1.71670E+02     Celcius -1.13150E+02     Kelvin  1.60000E+02
Fahrenheit -1.35670E+02     Celcius -9.31500E+01     Kelvin  1.80000E+02
Fahrenheit -9.96700E+01     Celcius -7.31500E+01     Kelvin  2.00000E+02
Fahrenheit -6.36700E+01     Celcius -5.31500E+01     Kelvin  2.20000E+02
Fahrenheit -2.76700E+01     Celcius -3.31500E+01     Kelvin  2.40000E+02
Fahrenheit  8.32999E+00     Celcius -1.31500E+01     Kelvin  2.60000E+02
Fahrenheit  4.43300E+01     Celcius  6.85001E+00     Kelvin  2.80000E+02
Fahrenheit  8.03300E+01     Celcius  2.68500E+01     Kelvin  3.00000E+02
Fahrenheit  1.16330E+02     Celcius  4.68500E+01     Kelvin  3.20000E+02
Fahrenheit  1.52330E+02     Celcius  6.68500E+01     Kelvin  3.40000E+02
Fahrenheit  1.88330E+02     Celcius  8.68500E+01     Kelvin  3.60000E+02
ajs94@wirth:~/CS214/projects/proj08/ada$ exit

Script done on Tue 11 Apr 2017 02:13:45 PM EDT
Script started on Tue 11 Apr 2017 09:16:38 PM EDT
ajs94@noyce-kilby:~/CS214/projects/proj08/e-lisp$ cat name    tes mpTester.el Temperature. el
;;; tempTester.el tests the Temperature type
;;;
;;; By: Aaron Santucci
;;; April 11, 2017
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; A simple driver program for the temperature functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (setq load-path (cons "." load-path))
  (load "Temperature.elc")
  (require 'cl)

  (setq baseTemp (Temperature 0 "F"))
  (setq limitTemp (Temperature 100 "C"))
  (setq stepValue 2.5)

  (loop
   (prin1 (concatenate 'string "Fahrenheit " (getFahren baseTemp) "     "))
   (prin1 (concatenate 'string "Celcius " (getCelcius baseTemp) "     "))
   (prin1 (concatenate 'string "Kelvin " (getFahren baseTemp)))
   (print "")
   (raise baseTemp stepvalue)
   (when (not (lessThan baseTemp limitTemp)) return 0)
   )
  )
"Fahrenheit      ""Celcius      ""Kelvin "
""


;;; Temperature.el creates a temperature 'object' with
;;;      stored degrees and scale
;;; By: Aaron Santucci
;;; Date: April 11, 2017
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun Temperature (degrees scale)
  (list degrees scale))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getter methods for the Temperature variables
;;; Receive: theTemp, a Temperature
;;; Return: the respective variable of theTemp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getDegrees (theTemp)
  (car theTemp))
(defun getScale (theTemp)
  (car (cdr theTemp)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; converter methods for Temperature ;
;;; Receive: theTemp, a Temperature   ;
;;; Return: the converted temperature ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getFahren(theTemp)
  (if (equal (getScale theTemp) "F")
      (car theTemp))
  (if (equal (getScale theTemp) "C")
      (/ (* (- (getDegrees theTemp) 32) 5) 9))
  (if (equal (getScale theTemp) "K")
      (- (/ (* (getDegrees theTemp) 9) 5) 459.67))
  )

(defun getCelcius(theTemp)
  (if (equal (getScale theTemp) "C")
      (getDegrees theTemp))
  (if (equal (getScale theTemp) "F")
      (/ (* (- (getDegrees theTemp) 32) 5) 9))
  (if (equal (getScale theTemp) "K")
      (-  (getDegrees theTemp) 273.15))
  )

(defun getKelvin(theTemp)
  (if (equal (getScale theTemp) "K")
      (getDegrees theTemp))
  (if (equal (getScale theTemp) "F")
      (/ (* (+ (getDegrees theTemp) 459.67) 5) 9))
  (if (equal (getScale theTemp) "C")
      (-  (getDegrees theTemp) 273.15))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; (raise) increases myDegrees by degrees   ;
;;; param: degrees: the addend to myDegrees  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun raise (theTemp degrees)
  (setf (nth 1 theTemp) (+ (getDegrees theTemp) degrees))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; (lower) decreases myDegrees by degrees   ;
;;; param: degrees: the subtrahend to myDegrees  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun lower (theTemp degrees)
  (setf (nth 1 theTemp) (- (getDegrees theTemp) degrees))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; (equals) checks if two Temperature objects are equal in Degrees
;;; param: theTemp, the left hand temperature                 ;
;;;      Temperature aTemp: the right hand operand            ;
;;; return: boolean of equality operator of their degrees     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun equals (theTemp aTemp)
  (if (equal (getScale theTemp) "F")
      ( = (getDegrees theTemp) (getFahren aTemp)))
  (if (equal (getScale theTemp) "C")
      ( = (getDegrees theTemp) (getCelcius aTemp)))
  (if (equal (getScale theTemp) "K")
      ( = (getDegrees theTemp) (getKelvin aTemp)))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; (lessThan) checks if a temperature's degrees are less than another
;;; param: theTemp, the left hand temperature                 ;
;;;      Temperature aTemp: the right hand operand            ;
;;; return: boolean of the less than operator of their degrees
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun lessThan (theTemp aTemp)
  (if (equal (getScale theTemp) "F")
      ( < (getDegrees theTemp) (getFahren aTemp)))
  (if (equal (getScale theTemp) "C")
      ( < (getDegrees theTemp) (getCelcius aTemp)))
  (if (equal (getScale theTemp) "K")
      ( < (getDegrees theTemp) (getKelvin aTemp)))
  )
ajs94@noyce-kilby:~/CS214/projects/proj08/e-lisp$ exit

Script done on Tue 11 Apr 2017 09:17:01 PM EDT
Script started on Tue 11 Apr 2017 09:07:41 PM EDT
ajs94@noyce-kilby:~/CS214/projects/proj08/ruby$ cat tempe Tester.rb Temperature.rb
# TempTester.rb test the Temperature module
#
# By: Aaron Santucci
# Date: April 11, 2017
##########################################################

require '/home/ajs94/CS214/projects/proj08/ruby/Temperature'

def testTemperature
  
  # test 1
  baseTemp = Temperature::Temperature.new(0, 'F')
  limitTemp = Temperature::Temperature.new(100, 'C')
  stepValue = 2.5
  
  while baseTemp.lessThan(limitTemp)
    puts("Fahrenheit #{baseTemp.getFahren}\t\tCelcius #{baseTemp.getCelcius}\t\tKelvin #{baseTemp.getKelvin}")
    baseTemp.raiseDegrees(stepValue)
  end
  
  print "\n"
  
  # test 2
  baseTemp.degrees = 0
  baseTemp.scale = 'K'
  limitTemp.degrees = 212
  limitTemp.scale = 'F'
  stepValue = 20.0
  
  while baseTemp.lessThan(limitTemp)
    puts("Fahrenheit #{baseTemp.getFahren}\t\tCelcius #{baseTemp.getCelcius}\t\tKelvin #{baseTemp.getKelvin}")
    baseTemp.raiseDegrees(stepValue)
  end
  
  print "All tests passed!\n"
end

testTemperature
# Temperature.rb contains the temperature module for ruby
#
# By: Aaron Santucci
# Date: April 11, 2017
##########################################################

module Temperature
  class Temperature
    
    def initialize (degree, scale)
      @degrees, @scale = degree, scale
    end
    
    # get metods for temperature
    attr_accessor :degrees, :scale
    
    def validScale(aScale)
    end
    
    # converter methods for the temperature class
    # return: the respective double temperature
    ######################################################
    def getFahren
      if @scale.casecmp('F') == 0
        return @degrees
      elsif @scale.casecmp('C') == 0
        return ((@degrees - 32) * 5 ) / 9
      elsif @scale.casecmp('K') == 0
        return ((@degrees * 9) / 5 ) - 459.67
      else
        return 0
      end
    end
    
    def getCelcius
      if @scale.casecmp('C') == 0
        return @degrees
      elsif @scale.casecmp('F') == 0
        return ((@degrees - 32) * 5 ) / 9
      elsif @scale.casecmp('K') == 0
        return @degrees - 273.15
      else
        return 0
      end
    end
    
    def getKelvin
      if @scale.casecmp('K') == 0
        return @degrees
      elsif @scale.casecmp('F') == 0
        return ((@degrees + 459.67) * 5 ) / 9
      elsif @scale.casecmp('C') == 0
        return @degrees - 273.15
      else
        return 0
      end
    end

    # raiseDegrees(degree) increases @degrees by a float degree
    # param: degree: the number added to @degrees
    ######################################################
    def raiseDegrees(degree)
      @degrees = @degrees + degree
    end
    
    # lowerDegrees(degree) decreases @degrees by a float degree
    # param: degree: the number subtracted from @degrees
    ######################################################
    def lowerDegrees(degree)
      @degrees = @degrees - degree
    end
    
    # equals() checks if two Temperature objects are equal in Degrees
    # param: Temperature temp: the right hand operand
	  # return: boolean of equality operator for their degrees
    ######################################################
    def equal(aTemp)
      if @scale.casecmp('F') == 0
        return @degrees == aTemp.getFahren()
      elsif @scale.casecmp('C') == 0
        return @degrees == aTemp.getCelcius()
      elsif @scale.casecmp('K') == 0
        return @degrees == aTemp.getKelvin()
      else
        return false
      end
    end
    
    # lessThan() checks if this Temperature is less than another
	  # param: Temperature temp: the right hand operand
	  # return: boolean of the less than operator for their degrees
    ######################################################
    def lessThan(aTemp)
      if @scale.casecmp('F') == 0
        return @degrees < aTemp.getFahren()
      elsif @scale.casecmp('C') == 0
        return @degrees < aTemp.getCelcius()
      elsif @scale.casecmp('K') == 0
        return @degrees < aTemp.getKelvin()
      else
        return false
      end
    end
      
    
  end
endajs94@noyce-kilby:~/CS214/projects/proj08/ruby$ rub by tempTester.rb
Fahrenheit 0		Celcius -18		Kelvin 255.3722222222222
Fahrenheit 2.5		Celcius -16.38888888888889		Kelvin 256.7611111111111
Fahrenheit 5.0		Celcius -15.0		Kelvin 258.15
Fahrenheit 7.5		Celcius -13.61111111111111		Kelvin 259.5388888888889
Fahrenheit 10.0		Celcius -12.222222222222221		Kelvin 260.92777777777775
Fahrenheit 12.5		Celcius -10.833333333333334		Kelvin 262.31666666666666
Fahrenheit 15.0		Celcius -9.444444444444445		Kelvin 263.7055555555555
Fahrenheit 17.5		Celcius -8.055555555555555		Kelvin 265.09444444444443
Fahrenheit 20.0		Celcius -6.666666666666667		Kelvin 266.48333333333335
Fahrenheit 22.5		Celcius -5.277777777777778		Kelvin 267.8722222222222
Fahrenheit 25.0		Celcius -3.888888888888889		Kelvin 269.2611111111111
Fahrenheit 27.5		Celcius -2.5		Kelvin 270.65
Fahrenheit 30.0		Celcius -1.1111111111111112		Kelvin 272.0388888888889
Fahrenheit 32.5		Celcius 0.2777777777777778		Kelvin 273.42777777777775
Fahrenheit 35.0		Celcius 1.6666666666666667		Kelvin 274.81666666666666

Fahrenheit -459.67		Celcius -273.15		Kelvin 0
Fahrenheit -423.67		Celcius -253.14999999999998		Kelvin 20.0
Fahrenheit -387.67		Celcius -233.14999999999998		Kelvin 40.0
Fahrenheit -351.67		Celcius -213.14999999999998		Kelvin 60.0
Fahrenheit -315.67		Celcius -193.14999999999998		Kelvin 80.0
Fahrenheit -279.67		Celcius -173.14999999999998		Kelvin 100.0
Fahrenheit -243.67000000000002		Celcius -153.14999999999998		Kelvin 120.0
Fahrenheit -207.67000000000002		Celcius -133.14999999999998		Kelvin 140.0
Fahrenheit -171.67000000000002		Celcius -113.14999999999998		Kelvin 160.0
Fahrenheit -135.67000000000002		Celcius -93.14999999999998		Kelvin 180.0
Fahrenheit -99.67000000000002		Celcius -73.14999999999998		Kelvin 200.0
Fahrenheit -63.670000000000016		Celcius -53.14999999999998		Kelvin 220.0
Fahrenheit -27.670000000000016		Celcius -33.14999999999998		Kelvin 240.0
Fahrenheit 8.329999999999984		Celcius -13.149999999999977		Kelvin 260.0
Fahrenheit 44.329999999999984		Celcius 6.850000000000023		Kelvin 280.0
Fahrenheit 80.32999999999998		Celcius 26.850000000000023		Kelvin 300.0
Fahrenheit 116.32999999999998		Celcius 46.85000000000002		Kelvin 320.0
Fahrenheit 152.32999999999998		Celcius 66.85000000000002		Kelvin 340.0
Fahrenheit 188.32999999999998		Celcius 86.85000000000002		Kelvin 360.0
All tests passed!
ajs94@noyce-kilby:~/CS214/projects/proj08/ruby$ exit

Script done on Tue 11 Apr 2017 09:08:18 PM EDT
