Script started on Wed 19 Apr 2017 01:51:58 PM EDT
ajs94@dijkstra:~/CS214/projects/proj09/java$ cat Max.java
/* Max.java finds the maximum values in Java linked lists.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by: Aaron Santucci
 * Date: April 19, 2017
 */

import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collections;

public class Max {

	public static void main(String [] args) {
		
		LinkedList<Integer> list1 = new LinkedList<Integer>(),
							list2 = new LinkedList<Integer>(),
							list3 = new LinkedList<Integer>(),
							list4 = new LinkedList<Integer>();
		
		list1.add(99);    // 99, 88, 77, 66, 55
		list1.add(88);    // max is first
		list1.add(77);
		list1.add(66);  
		list1.add(55);

		list2.add(55);    // 55, 66, 77, 88, 99
		list2.add(66);    // max is last
		list2.add(77);  
		list2.add(88);  
		list2.add(99);  

		list3.add(55);    // 55, 77, 99, 88, 66
		list3.add(77);    // max is in the middle
		list3.add(99);  
		list3.add(88);  
		list3.add(66);  
		
		list4.add(0);    
		list4.add(1);    
		list4.add(2);  
		list4.add(3);  
		list4.add(4);

	    print(list1); 
	    print(list2); 
	    print(list3);

		System.out.println("Max of list1: " + Collections.max(list1));
		System.out.println("Max of list2: " + Collections.max(list2));
		System.out.println("Max of list3: " + Collections.max(list3));
		
		// *** project 9 testing ***
		assert (search(list1, 99) == 0);
		System.out.println("Found 99 at position " + search(list1, 99) + " in list1");
		assert (search(list2, 99) == 4);
		System.out.println("Found 99 at position " + search(list2, 99) + " in list2");
		assert (search(list3, 99) == 2);
		System.out.println("Found 99 at position " + search(list3, 99) + " in list3");
		assert (search(list4, 99) == -1);
		System.out.println("list4 search return: " + search(list4, 99));
  }

 
	/** print() displays a LinkedList on the console.
     * @param: aList, a LinkedList<Integer>
     * Postcondition: the Integer values in aList
     *                 have been displayed to System.out,
     *                 separated by spaces.
     */ 
	public static void print (LinkedList<Integer> aList)
	{
		Iterator<Integer> listIterator = aList.iterator();
	 	while (listIterator.hasNext())	{
	  		System.out.print(listIterator.next() + " ");
		}
	  	System.out.print('\n');
  	}
	
	/* search() returns the position of a given value in a list
	 * @param: 	aList, a LinkedList<Integer>
	 * 		   	aValue, the integer being searched for
	 * @return: the integer position of aValue; -1 if not in aList 
	 */
	public static int search (LinkedList<Integer>aList, int aValue)
	{
		Iterator<Integer> listIterator = aList.iterator();
		int count = 0;
	 	while (listIterator.hasNext())	{
			if (listIterator.next() == aValue)
				return count;
			count += 1;
		}
		return -1;
	}
	
}




ajs94@dijkstra:~/CS214/projects/proj09/java$ javac -deprecation Max.java
ajs94@dijkstra:~/CS214/projects/proj09/java$ java m Max
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
Max of list1: 99
Max of list2: 99
Max of list3: 99
Found 99 at position 0 in list1
Found 99 at position 4 in list2
Found 99 at position 2 in list3
list4 search return: -1
ajs94@dijkstra:~/CS214/projects/proj09/java$ exit

Script done on Wed 19 Apr 2017 01:52:23 PM EDT
Script started on Wed 19 Apr 2017 02:26:17 PM EDT
ajs94@dijkstra:~/CS214/projects/proj09/ada$ cat max.adb listpacka     _package.ads list_pa ckage.ab db
-- max.adb finds the max of a list of integers. 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 13, 2017
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure Max is 
                              -- define 3 lists 
  List1, List2, List3, List4: List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
  Init(List4);
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- max is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- max is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- max is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 
  
  Append(11, List4); 
  Append(22, List4);
  Append(33, List4); 
  Append(44, List4); 
  Append(55, List4); 
 
  Put(List1); New_Line;       -- output the 3 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  
  Put( Max(List1) ); 
  New_Line; 
  Put("The maximum value in list 2 is "); 
  Put( Max(List2) );
  New_Line; 
  Put("The maximum value in list 3 is ");
  Put( Max(List3) );
  New_Line; 
  
  -- Project 9 testing
  Put("The position of 99 in list 1 is ");
  Put(Search(List1, 99));
  Put("The position of 99 in list 2 is ");
  Put(Search(List2, 99));
  Put("The position of 99 in list 3 is ");
  Put(Search(List3, 99));
  Put("The position of 99 in list 4 is ");
  Put(Search(List4, 99));
      
 
end Max; 

-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 13, 2017
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List);

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------
  function Max(A_List : in List) return Integer;
  
  ---------------------------------------
  -- return the position of a value in a list
  -- receive: aList, a List
  --          aValue, the integer searched for
  -- return: integer position of aValue; -1 if not in aList 
  ---------------------------------------
  function Search(AList : in List ; AValue : in Integer) return Integer;

private
   
    type List_Node;
    type Node_Ptr is access List_Node;
    type List_Node is
       record
	  Its_Value : Integer;
	  Its_Next : Node_Ptr;
       end record;
    
    type List is
       record
	  Its_First : Node_Ptr;
	  Its_Last : Node_Ptr;
	  Its_Length : Integer;
       end record;

end List_Package;

-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Aaron Santucci
-- Date: April 13, 2017
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------
  procedure Put(A_List : in List) is
     Temp_Ptr : Node_Ptr := A_List.Its_First;
  begin
     while Temp_Ptr /= null loop
	Put(' '); Put(Temp_Ptr.Its_Value);
	Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
  end Put;

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------
  function Max(A_List : in List) return Integer is
   Temp_Ptr : Node_Ptr := A_List.Its_First;
   TheMax : Integer := -999999;
  begin
     while Temp_Ptr /= null loop
        if Temp_Ptr.Its_Value > TheMax
	then
	   TheMax := Temp_Ptr.Its_Value;
	end if;
	Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
     return TheMax;
  end Max;
  
  ---------------------------------------
  -- return the position of a value in a list
  -- receive: aList, a List
  --          aValue, the integer searched for
  -- return: integer position of aValue; -1 if not in aList 
  ---------------------------------------
  function Search(AList : in List ; AValue : in Integer) return Integer is
     Temp_Ptr : Node_Ptr := AList.Its_First;
     Count : Integer := 1;
  begin
     while Temp_Ptr /= null 
     loop
	if Temp_Ptr.Its_Value = AValue
	then
	   return Count;
	end if;
        Count := Count + 1;
	Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
     return -1;
  end Search;
  
       
end List_Package;


ajs94@dijkstra:~/CS214/projects/proj09/ada$ gnatmake pist    list_package
ajs94@dijkstra:~/CS214/projects/proj09/ada$ gnatmake list_package            maxx 
gnatmake: "max" up to date.
ajs94@dijkstra:~/CS214/projects/proj09/ada$ ma  ./max. 
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
The position of 99 in list 1 is           1The position of 99 in list 2 is           5The position of 99 in list 3 is           3The position of 99 in list 4 is          -1
ajs94@dijkstra:~/CS214/projects/proj09/ada$ exit

Script done on Wed 19 Apr 2017 02:27:03 PM EDT
Script started on Wed 19 Apr 2017 02:42:35 PM EDT
ajs94@dijkstra:~/CS214/projects/proj09/e-lisp$ cat max.el y ny  myLK s ist.el
;;; max.el searches a list for its maximum value.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Aaron Santucci
;;; Date: April 13, 2017

(setq load-path (list "."))              ; setup load-path to WD

(load "mylist.elc")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; test function Max. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (let
      ((buf (get-buffer "max.el"))       ; setup for output
       (list1 (list 99 88 77 66 55))     ; max is first
       (list2 (list 55 66 77 88 99))     ; max is last
       (list3 (list 55 77 99 88 66)))    ; max in middle

    (princ list1 buf)                    ; print list1
    (terpri buf)                         ;  and a newline

    (princ list2 buf)                    ; print list2
    (terpri buf)                         ;  and a newline

    (princ list3 buf)                    ; print list3
    (terpri buf)                         ;  and a newline
  
    (princ "The max in list 1 is " buf)  ; print the max
    (princ (Max list1) buf)              ;  in list1
    (terpri buf)                         ;  and a newline
    (princ "The max in list 2 is " buf)  ; print the max
    (princ (Max list2) buf)              ;  in list2
    (terpri buf)                         ;  and a newline
    (princ "The max in list 3 is " buf)  ; print the max
    (princ (Max list3) buf)              ;  in list3
    (terpri buf)                         ;  and a newline

    ;;; Project 9 Testing
    (princ "The position of 99 in list 1 is " buf)
    (princ (Search list1 99) buf)
    (princ "The position of 99 in list 2 is " buf)
    (princ (Search list2 99) buf)
    (princ "The position of 99 in list 3 is " buf)
    (princ (Search list3 99) buf)
    (princ "The position of 99 in list 4 is " buf)
    (princ (Search list4 99) buf)
cat: myList.el: No such file or directory
ajs94@dijkstra:~/CS214/projects/proj09/e-lisp$ exit

Script done on Wed 19 Apr 2017 02:42:50 PM EDT
Script started on Wed 19 Apr 2017 02:54:04 PM EDT
ajs94@dijkstra:~/CS214/projects/proj09/ruby$ max.rb l Luist    istrb  .rb
max.rb: command not found
ajs94@dijkstra:~/CS214/projects/proj09/ruby$ max.rb List.rb[1@c[1@a[1@t[1@ 
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by: 
# Date: 

require './List'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(11).append(22).append(33).append(44).append(55)

list1.print 
puts
puts "Maximum of list1: #{list1.max}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"

list4.print
puts

# Project 9 testing
puts "Found 99 at position #{list1.search(99)}"
puts "Found 99 at position #{list2.search(99)}"
puts "Found 99 at position #{list3.search(99)}"
puts "Found 99 at position #{list4.search(99)}"

# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:
# Date:
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

  def initialize
    @first, @last = nil
    @length = 0
  end


   # create reader method for length

   # Replace this line with a statement to define a 'length' reader method


   # Am I empty?
   # Return: length == 0
  def empty?
    @length == 0
  end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
  def append(value)
    newNode = Node.new(value, nil)

    if empty?
      @first = newNode
    else
      @last.next = newNode      
    end

    @last = newNode
    @length += 1
    self
  end


  # print my items
  # Postcondition: my items have been displayed to the screen
  def print
    temp = @first
    while !temp.nil?
      printf " #{temp.value}"
      temp = temp.next
    end  
  end


  # find my maximum item
  # Return: my maximum item
  def max
    temp = @first
    maxValue = -999999
    while !temp.nil?
      if temp.value > maxValue
        maxValue = temp.value
      end
      temp = temp.next
    end
    return maxValue
  end
      
  # find the position of an integer
  # return: the positon of aValue
  def search(aValue)
    temp = @first
    count = 0
    while !temp.nil?
      if temp.value == aValue
        return count
      end
      count = count + 1
      temp = temp.next
    end
    return -1
  end

  class Node
      def initialize(item, link)
         @value = item
         @next = link
      end

      attr_reader :value
      attr_accessor :next
  end

end

ajs94@dijkstra:~/CS214/projects/proj09/ruby$ ruby max.rb
 99 88 77 66 55
Maximum of list1: 99
 55 66 77 88 99
Maximum of list2: 99
 55 77 99 88 66
Maximum of list3: 99
 11 22 33 44 55
Found 99 at position 0
Found 99 at position 4
Found 99 at position 2
Found 99 at position -1
ajs94@dijkstra:~/CS214/projects/proj09/ruby$ exit

Script done on Wed 19 Apr 2017 02:54:27 PM EDT
